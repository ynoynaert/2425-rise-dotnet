@page "/machines/{id:int}/bewerken"
@using Rise.Client.Machineries.Components
@inject NavigationManager NavigationManager
@attribute [Authorize(Roles = "Administrator")]

<PageTitle>Machine bewerken</PageTitle>

<div class="machine-edit-title">
    <Button class="back-button" Clicked="@(() => OnButtonClicked())">
        <Icon Name="IconName.ArrowLeft" />
    </Button>
    <h3>Machine bewerken</h3>
</div>

<div class="div-form">
    <Card>
        <CardBody>

            @if (Model is null)
            {
                @if (!string.IsNullOrEmpty(errorMessages))
                {
                    <div class="alert alert-danger mt-3">@errorMessages</div>
                }
                else
                {
                    <p><em>Loading...</em></p>
                }

            }
            else
            {
                @if (!string.IsNullOrEmpty(errorMessages))
                {
                    <div class="alert alert-danger mt-3">@errorMessages</div>
                }
                <EditForm class="edit-form" Model="@Model" OnValidSubmit="@ValidateData">
                    <Validations @ref="@fluentValidations" HandlerType="typeof(FluentValidationHandler)" Mode="ValidationMode.Auto" Model="@Model">

                        <Validation Validator="@ValidateFilePicker">
                            <Field>
                                <FieldLabel RequiredIndicator>Afbeelding(en): </FieldLabel>
                                <h6>Nieuwe: </h6>
                                <FilePicker @ref="filePickerCustom"
                                            Multiple="true"
                                            Changed="@(args => OnFileUpload(args))"
                                            ShowMode="FilePickerShowMode.List"
                                            accept="image/*">
                                    <FileTemplate Context="file">
                                        <Div Flex="Flex.JustifyContent.Between">
                                            <Div Flex="Flex.JustifyContent.Around">
                                                <Div>
                                                    @if (file.File.Status == FileEntryStatus.Ready)
                                                    {
                                                        <Icon TextColor="TextColor.Primary" Name="IconName.FileUpload" class="icon" />
                                                    }
                                                    else if (file.File.Status == FileEntryStatus.Uploading)
                                                    {
                                                        <Icon TextColor="TextColor.Warning" Name="IconName.Bolt" class="icon" />
                                                    }
                                                    else if (file.File.Status == FileEntryStatus.Uploaded)
                                                    {
                                                        <Icon TextColor="TextColor.Success" Name="IconName.CheckCircle" class="icon" />
                                                    }
                                                    else if (file.File.Status == FileEntryStatus.Error)
                                                    {
                                                        <Icon TextColor="TextColor.Danger" Name="IconName.TimesCircle" class="icon" />
                                                    }
                                                </Div>
                                                <Div>

                                                    <Heading Size="HeadingSize.Is5">@file.File.Name</Heading>
                                                    <Paragraph>@FilePicker.GetFileSizeReadable(file.File)</Paragraph>
                                                </Div>
                                            </Div>
                                        </Div>
                                    </FileTemplate>
                                    <ButtonsTemplate Context="buttonContext">
                                        <Button @onclick="ShowDeleteAllConfirmation" Color="Color.Danger"><Icon Name="IconName.Delete" /></Button>
                                    </ButtonsTemplate>
                                </FilePicker>

                                @if (imgerror)
                                {
                                    <div class="errorimg">Er moet minstens 1 nieuwe afbeelding geselecteerd zijn</div>

                                }
                            </Field>
                        </Validation>

                        <Div>
                            <h6>Afbeelding(en) van de machine: </h6>
                            @foreach (var image in bestaandeImages!)
                            {
                                <Div Flex="Flex.JustifyContent.Between" AlignItems="AlignItems.Center">
                                    <Div>
                                        <img src="@image.Url" alt="Image" width="100" />
                                    </Div>
                                    <Div>
                                        <Button Color="Color.Danger" Clicked="@(() => ShowDeleteConfirmation(image))">
                                            Verwijder
                                        </Button>
                                    </Div>

                                </Div>
                                <br />
                            }
                        </Div>

                        <Validation>
                            <Field>
                                <FieldLabel RequiredIndicator>Serienummer: </FieldLabel>
                                <TextEdit @bind-Text="Model.SerialNumber" class="form-control" id="input-serialnumber" />
                                <ValidationMessage For="() => Model!.SerialNumber" />
                                <ValidationError />
                            </Field>
                        </Validation>

                        <Validation>
                            <Field>
                                <FieldLabel RequiredIndicator>Naam: </FieldLabel>
                                <TextEdit @bind-Text="Model.Name" class="form-control" id="input-name" />
                                <ValidationMessage For="() => Model!.Name" />
                                <ValidationError />
                            </Field>
                        </Validation>

                        <Validation>
                            <Field>
                                <FieldLabel RequiredIndicator>Beschrijving: </FieldLabel>
                                <TextEdit @bind-Text="Model.Description" class="form-control" id="input-description" />
                                <ValidationMessage For="() => Model!.Description" />
                                <ValidationError />
                            </Field>
                        </Validation>

                        <Validation>
                            <Field>
                                <FieldLabel RequiredIndicator>Brochuretekst: </FieldLabel>
                                <MemoEdit Rows="5" @bind-Text="Model.BrochureText" class="form-control" id="input-brochureText" />
                                <ValidationMessage For="() => Model!.BrochureText" />
                                <ValidationError />
                            </Field>
                        </Validation>

                        <Validation>
                            <Field>
                                <FieldLabel RequiredIndicator>Type: </FieldLabel>
                                @if (types == null)
                                {
                                    <p><em>Laden...</em></p>
                                }
                                else
                                {
                                    <Select TValue="int" @bind-SelectedValue="Model.TypeId" id="input-typeId">
                                        <SelectItem Value="0">Selecteer een type</SelectItem>
                                        @foreach (var type in types)
                                        {
                                            <SelectItem Value="@type.Id">@type.Name</SelectItem>
                                        }

                                    </Select>
                                    <ValidationMessage For="() => Model!.TypeId" />
                                    <ValidationError />
                                }
                            </Field>
                        </Validation>

                        <Button Type="ButtonType.Submit" class="btn btn-primary add-button">Bewerken</Button>
                    </Validations>
                </EditForm>
            }
        </CardBody>
    </Card>
</div>
<ConfirmationModal @ref="confirmationModal" Title="Bevestig verwijderen" OnConfirm="OnDeleteConfirmed" />